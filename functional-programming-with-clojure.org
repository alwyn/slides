#+Title: Get into Functional Programming with Clojure
#+Author: John Stevenson
#+Email: @jr0cket

#+OPTIONS: toc:nil num:nil
#+OPTIONS: reveal_width:1920
#+OPTIONS: reveal_height:1080
#+OPTIONS: reveal_center:nil 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t 
#+REVEAL_TRANS: linear
#+REVEAL_THEME: jr0cket
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Get into Functional Programming with Clojure">

* What is Clojure?

General purpose Functional programming language
- on the Java JVM, Nashorn, JavaScript / Node.js, or Microsoft CLR

[[./images/myth-fp-is-for-geniuses.png]]

** A modern approach to LISP 

Updated syntax & hosted language

[[./images/lisp-made-with-secret-alien-technology.png]]

** Who is using Clojure 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Everyone, its a general purpose language after all

- USwitch      - creating meaningful data from multiple sources
- Daily Mail   - High volume site Mail Online
- Xively       - IoT
- Masterdon C  - data centre analysis (Incanta, Storm)
- Thoughtworks - rapid development for clients
- CitiGroup    - financial trading
- LinkedIn     - aspects of social graph
- Meta-X       - performance art (Overtone, Quil)

Also create games using play-clj 


* Why Clojure

What is the motivation for using Clojure ?



** Java is evolving...

...but we have to wait for the language designers 

[[./images/duke_evolution.jpg]]

** Simplifying Complexity 

Break down problems into small components 

[[./images/clojure-thoughts-on-why-to-learn-it.gif]]

** Scaling Computing Power

Our laptops have more cores, not faster processors

Concurrency & Parallelism is needed to scale your software

[[./images/java-scaleable-duke.png]]

** Functional Programming & Immutability

Encouraging immutable state approach greatly simplifies scaling your application

[[./images/mutable-state-reservior-dogs-say-mutable-state-one-more-time.png]]

#+REVEAL: split

[[./images/mutable-state--one-does-not-simply-share.jpg]]

#+REVEAL: split

[[./images/mutable-state--inevitable-fail.jpg]]



* Simple Clojure syntax 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

Really quick to get coding with
- define data structures (the data)
- define functions (the behaviour)
- call functions (which always return a value)

** Simple Clojure program 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

Defining a namespace, data structure & function, then calling the function.

#+BEGIN_SRC clojure 

(ns jr0cket.demo)

(def my-data [1,2,3, frog])

(defn do-stuff [parameter]
  (str parameter))

(do-stuff my-data)
#+END_SRC


** Clojure poetry 
:PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

[[./images/clojure-dojo-poetry.png]]


* Data Structure Driven Design 
:PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

Define a meaningful data structure

Define the behaviour (functions) that work with that data
 
  "It is better to have 100 functions operate on one data structure,
 than to have 10 functions operate on 10 data structures" - A.J. Perlis 


** Data Structures 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Persistent data structures built in:
- List
- Map 
- Vector (think array) 
- Sets

Typical data structures are maps, vectors, maps of maps, vectors of vectors, etc

** Mixing data structures all together 
#+BEGIN_SRC clojure 
(def data {:keyword1 value1 
           :vector [1 2 3]
           :map {:a 1 :b 2 :c cat}}
           :mixed {:vector [1 2 3 fish]
                   :vector-of-vectors 
                     [1 2 [3 4]]
                   :maps-n-vectors 
                     {:co-ords [12.37 53.78]}})
#+END_SRC

Note that I have used keywords (names that start with a :) to describe the types of data structures used within the above map

** Data Structure examples
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Expressive data structures made code more understandable 

#+BEGIN_SRC clojure 
(def locations {
     :london {:latitude 34, :longtitude 57}})

(def location {
     :london     {:gps {:co-ords [12.37 53.78]}}
     :new-york   {:gps {:co-ords [12.37 53.78]}}
     :Birmingham {:gps {:co-ords [12.37 53.78]}}})
#+END_SRC


* Language design
:PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

A very small core library 
- with a large set of libraries 


** Only a handful of building blocks

Clojure primatives
#+BEGIN_SRC Clojure
if let loop recur do set! quote var
#+END_SRC

And a few extra to make Java Interop nice 
#+BEGIN_SRC Clojure
new . throw try
#+END_SRC


** Data Types
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
- arbritrary precision integers
- Doubles 1.234, BigDecials 1.23M
- Rations 22/7 
- Strings "jr0cket", Characters \a \b \c
- Symbols fred wilma , keywords :barney :betty  (fast keys for maps) 
- Boolean true false , Null nil (nil is false, `is nil` as a condition (eg, if else))
- Regex patterns #"a*b"

A great way to explain Clojure is to talk about data 


* Stateless approach to design 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

Immutable State is strongly encouraged  

Persistent collections  

Software Transactional Memory (make changes like an atomic database)
- does to state management what Garbage collection does to memory management

[[http://www.infoq.com/articles/in-depth-look-clojure-collections][In-depth look at Collections]]


** Persistent Data Structures
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

Lists, Vectors, Maps & Sets are all immutable 
- cannot be changed once defined 

** Modifying persistent data structures
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Making a change creates a new data structure
- contains only the change
- links back to the original data structure
- original data structure remains unchanged

[[./images/clojure-persistent-data-structures.png]]

** Software Transational Memory (STM)
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Change data in a controlled way 
- live having an atomic in-memory database

Define Atoms and swap! their values


* Dynamic development 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
- REPL 
- define functions on the fly
- load & compile code at runtime (load fixes into running production)
- introspection - not just typing things in, but accessing the Clojure runtime

Notions of phases of compilation are relaxed, you are compiling all the time into bytecode


* Extensibility 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Macros allow developers to create new features for the language
- no waiting for the langugage designers


** Build Tool Macro
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Leiningen makes it really easy to define a Clojure project using a Macro 

#+BEGIN_SRC Clojure
(defproject name version 
  :description ""
  :dependencies [ [library version] [] ])
#+END_SRC


** Reactive Programing
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Om is a Clojurescript Library for Facebook React

#+BEGIN_SRC Clojure
(defui HelloWorld
  Object
  (render [this]
          (dom/div nil (get (om/props this) :title))))
#+END_SRC


* Meta-programming 

Macros allow developers to extend the language beyond the language designers

Enables the rapid creation of tools & libraries 
- Leingingen, build automation tool
- core.async, asyncronous programming made simple
- core.logic, pascal like logic reasoning
- core.typed, a static type system on top of Clojure


* The Whole JVM world of Libraries
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Easy to use Java/JVM libraries from Clojure 

#+BEGIN_SRC Clojure
.
new 
#+END_SRC

** Importing libraries 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:

** Java.Lang
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
java.lang library is always included

** Example: Java Date
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
A function to return the current date 
#+BEGIN_SRC Clojure
(defn now [] (java.util.Date.))
#+END_SRC

** Example: Java Math
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Define a symbol to represent Pi

#+BEGIN_SRC clojure
(def pi Math/PI)
#+END_SRC

** Example: Joda Time
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
clj-time is a wrapper around joda-time

#+BEGIN_SRC clojure
(require '[clj-time.core :as time])
(require '[clj-time.format :as time-format])

(time/now) => #<DateTime 2013-03-31T03:23:47.328Z>

(def time-formatter (time-format/formatters :basic-date-time))  ;; ISO 8601 UTC format
(time-format/unparse custom-formatter (date-time 2010 10 3)) => "20101003T000000.000Z"
#+END_SRC

** Wealth of existing Java libraries
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
- many wrappers to make them even easier to use 
- nicer to code in Clojure than Java


* Amazing Clojure Libraries 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
clojars


** Asynchronus coding as a library
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
core.async

** Type system as a library
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
If you must really define your own types


* Amazing community 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:






* Lets play with Clojure 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Lets write some clojure using [[http://lighttable.com][LightTable]]


* Why not other functional languages ?

** Haskell 

The pure approach makes Haskell a harder language to fully understand

** JavaScript 

Have you seen the syntax ?
- actually Functional JavaScript is not too bad

An immutable approach is not strongly supported by the language

** Python

Lots of great python developers out there
- never seen that many using a Functional approach


* Learning Clojure
:PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
#+BEGIN_SRC clojure
(false? (afraid brackets))
#+END_SRC

- Learn Clojure on the Internet
- Read some Clojure books
- find or start a Clojure / Functional meetup

** 4Clojure

An increasingly difficult set of changenges to help you understand Clojure 

[[./images/clojure-4clojure-home.png]]

** 4Clojure - simple example

[[./images/clojure-4clojure-example-list-elementry.png]]

** 4Clojure - more complexe example

[[./images/clojure-4clojure-example-forthewin.png]]

** Books

- [[http://developerpress.com/en/clojure-made-simple-introduction-clojure][Clojure Made Simple]] (ebook) - £1.99 on [[http://www.amazon.co.uk/Clojure-Made-Simple-ebook/dp/B00BSY20HS][Amazon.co.uk]]
- [[http://joyofclojure.com/][Joy of Clojure]]
- [[http://www.clojurebook.com/][Clojure Programming]]
- [[http://pragprog.com/book/shcloj2/programming-clojure][Programming Clojure]] - 2nd edition 

** Blogs, Documentation, etc.

[[http://planet.clojure.in/][Planet Clojure]] - blog aggregator

[[http://blog.jr0cket.co.uk/][blog.jr0cket.co.uk]] - Clojure, Emacs & Git articles
 
[[http://clojure.org/][clojure.org]] - official documentation 

[[http://clojuredocs.org/][clojuredocs.org]] - community docs & examples

[[http://clojure.org/cheatsheet][Clojure Cheatsheet]] - quick syntax & function reference


* Thank you

@jr0cket

jr0cket.co.uk 

github.com/jr0cket 



* Leiningen for everything 
 :PROPERTIES:
    :reveal_background: ./images/leiningen-slide-background.png
    :reveal_background_trans: slide
    :END:

[[http://leiningen.org][Leiningen]] allows you to:

#+ATTR_REVEAL: :frag roll-in
  * Create projects
  * Manage dependencies (uses mvn local cache)
  * Package projects into libraries 
  * Generate Maven POM files (if you must)
  * Deploy your libraries on [[http://clojars.org][Clojars]]
  * Run the REPL

** Leiningen Requirements

Must have the Java JDK (not just the JRE)

- this is a requirement for any Clojure development 

** Leiningen Demo
:PROPERTIES:
    :reveal_background: ./images/leiningen-slide-background.png
    :reveal_background_trans: slide
    :END:

Time for some live hacking...

** Leiningen core commands

- Create a new project 
lein new project-name

- Check dependencies and download any required 
lein deps 

- Run a REPL
lein repl 

- Find out more
lein help 

** Demo code - project.clj  
:PROPERTIES:
    :reveal_background: ./images/leiningen-slide-background.png
    :reveal_background_trans: slide
    :END:

  A basic Leiningen project definition

#+BEGIN_SRC clojure
(defproject whats-my-salary "0.1.0-SNAPSHOT"
  :description "Calculate salary after tax for perminant employees"
  :url "http://blog.jr0cket.co.uk"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.4.0"]]
  :main whats-my-salary.core )
#+END_SRC

** Demo code - more stuff..  
:PROPERTIES:
    :reveal_background: ./images/leiningen-slide-background.png
    :reveal_background_trans: slide
    :END:

  Colourful code

#+BEGIN_SRC clojure
(defn show-me-the-colours [colour]
   ( str "The colour of money is" colour))
#+END_SRC



* Emacs for Clojure

Emacs is a powerful tool for your developer life, its a nice editor too...

- development environments for lots of languages
- manage tasks, take effective notes and create presentations

#+ATTR_REVEAL: :frag roll-in
- Ubuntu:  [[https://launchpad.net/~cassou/+archive/emacs][Personal Package Archive]] for latest version
- MacOSX: [[http://emacsformacosx.com/][EmacsForMacOSX.com]] or via [[http://brew.sh/][Homebrew]]
- Windows: [[http://ftp.gnu.org/gnu/emacs/windows/][pre-compiled version available]]

** Emacs Live 

Creates an amazing environment for Clojure development

#+ATTR_REVEAL: :frag roll-in
- keeping () under control with ParEdit
- starting / connecting to a REPL
- evaluating code in-line (C-x C-e) or all the code (C-c C-k)
- syntax highlighting & auto-complete
- gloriously colourful themes 

** Roll your own Emacs setup 

Add the following Emacs packages 

clojure-mode 
clojure-test-mode
rainbow-delimiters
ac-slime

Look at my basic setup on [[http://clojuremadesimple.co.uk][clojuremadesimple.co.uk]] 


** Learning Lisp with Emacs

Configuring Emacs is via a Lisp language called ELisp

#+ATTR_REVEAL: :frag roll-in
- practice your core Clojure skills by tweaking Emacs
- lots of examples of Lisp code on Github 


* Light Table 
:PROPERTIES:
    :reveal_background: ./images/clojure-lighttable-slide-background.png
    :reveal_background_trans: slide
    :END:

A project to create a great experience for Clojure Development

#+ATTR_REVEAL: :frag roll-in
- instarepl
- start / connect to multiple REPL's
- written in Clojurescript & a few lines of Clojure 
- run browser & graphics in a window 
- also supports Clojurescript, JavaScript & Python
- still beta, not officially release as yet
- join [[https://groups.google.com/forum/#!forum/light-table-discussion][light-table-discussion]] Google group to keep up with changes

** Installing Light Table

[[http://lighttable.com][LightTable.com]] - binaries for Linux (32bit & 64bit), MacOSX & Windows

** Documentation

Built in documentation 

[[http://docs.lighttable.com/][docs.lighttable.com]]

[[http://www.chris-granger.com/][Chris Granger's blog]] - major announcements & a few guides


* Java IDE's
:PROPERTIES:
    :reveal_background: #770000
    :reveal_background_trans: slide
    :END:

** Eclipse & Counterclockwise
:PROPERTIES:
    :reveal_background: #770000
    :reveal_background_trans: slide
    :END:

[[https://code.google.com/p/counterclockwise/][code.google.com/p/counterclockwise]]

A great combo if you are used to Eclipse
 
#+ATTR_REVEAL: :frag roll-in
- uses Leiningen underneath
- provides a REPL window
- usual syntax highlighting and other IDE stuff


** Netbeans & Enclojure
:PROPERTIES:
    :reveal_background: #770000
    :reveal_background_trans: slide
    :END:

Sadly the [[http://enclojure.wikispaces.com/][Enclojure]] plugin for Netbeans is depreciated

The [[https://github.com/EricThorsen/enclojure][Enclojure code is available on Github]], if you want to kickstart the project. 


** Intelij & LaClojure 
:PROPERTIES:
    :reveal_background: #770000
    :reveal_background_trans: slide
    :END:

[[http://wiki.jetbrains.net/intellij/Getting_started_with_La_Clojure][Getting started with La Clojure]]



* Thank you 

Get Leiningen

Use Emacs, LightTable or your favourite IDE

Have fun in the REPL and love writing Clojure

#+ATTR_REVEAL: :frag hightlight-red
ps. This presentation was brought to you via Emacs & Revealjs


* Reveal.js is 2-D

  Org-Reveal knows how to drill down into a subject.

  Press the "Down" key on the page or the down arrow

** Fragments in Reveal.js

#+ATTR_REVEAL: :frag highlight-blue
   * Create
   * Fragment
   * At Ease
   
#+CAPTION: The Org text source.
#+BEGIN_SRC org
#+ATTR_REVEAL: :frag
   * Create
   * Fragment
   * At Ease
#+END_SRC

** Reveal.js Can Alert
   :PROPERTIES:
   :reveal_data_state: alert
   :END:

   Change slide style to wake up the sleepy audience.

   So do Org-Reveal.
#+BEGIN_SRC org
 ** Reveal.js Can Alert
    :PROPERTIES:
    :reveal_data_state: alert
    :END:
#+END_SRC


** Display Math

   Write equations in Org. Present equations in HTML5.

   $\lim_{x \to \infty} \exp(-x) = 0$

#+BEGIN_SRC org
   $\lim_{x \to \infty} \exp(-x) = 0$
#+END_SRC

* The Org Source

  Get Org source text for this presentation [[http://nage-eda.org/home/yujie/index.org][here]].

* Get Reveal.js and Org-reveal

  - Reveal.js on GitHub:\\
    [[https://github.com/hakimel/reveal.js]]
  - Org-reveal on GitHub:\\
    [[https://github.com/yjwen/org-reveal]]

  [[./images/org-reveal.png]]

** A bit more Clojure 
 :PROPERTIES:
    :reveal_background: ./images/clojure-slide-background.png
    :reveal_background_trans: slide
    :END:
Also using a local variable (which doesnt vary)
#+BEGIN_SRC clojure 
(ns jr0cket.demo)

(def my-data [1 2 3 "frog"])

(defn do-stuff [parameter]
  (let [local-data (first parameter)]
  (str local-data)))

(do-stuff my-data)
#+END_SRC

